name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "gh-unread/gh-actions-cache"

      - name: Run rustfmt
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features

      - name: Run test
        run: cargo test --verbose
  build:
    name: Build (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os || 'ubuntu-latest' }}
    needs: check
    strategy:
      fail-fast: false
      matrix:
          job:
            - os: ubuntu-latest
              target: x86_64-unknown-linux-gnu
              use-cross: false
            - os: ubuntu-latest
              target: x86_64-unknown-linux-musl
              use-cross: true
            # note: aarch64-unknown-linux-gnu and aarch64-unknown-linux-musl are not available on ubuntu-latest (idk why)
            # - os: ubuntu-latest
            #   target: aarch64-unknown-linux-gnu
            #   use-cross: true
            # - os: ubuntu-latest
            #   target: aarch64-unknown-linux-musl
            #   use-cross: true
            - os: macos-latest
              target: x86_64-apple-darwin
              use-cross: false
            - os: macos-latest
              target: aarch64-apple-darwin
              use-cross: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: ${{ matrix.job.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "gh-unread/gh-actions-cache"

      - name: Install cross
        if: matrix.job.use-cross
        run: cargo install cross

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.job.target }}
